#!/usr/bin/python
#
# mkstrongpw - Strong Password Generator
# Copyright (C) 2011  Nick Bair
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

import sys
import random
import optparse

class passwordGenerator:

	def __init__(self):
		self.desc = {
			'lowercase': 'lowercase letters',
			'uppercase': 'uppercase letters',
			'digits':    'numerical digits',
			'symbols':   'non-alphanumeric symbols',
			'spaces':    'spaces',
		}


		self.parser = self.get_opts(
			usage = '%prog [options] [filename]',
			version = '%prog 1.0'
		)
		self.options, self.args = self.parser.parse_args()

	def vo(self, string=''):
		"""
		Verbose output
		"""
		if self.options.verbose:
			print(string)
			return True
		else:
			return False

	def generate_sequence(self):
		self.vo('Using built-in sequence generator:')

		# define valid characters
		valid_chars = { 
			'lowercase': 'abcdefghijklmnopqrstuvwxyz',
			'uppercase': 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
			'digits':    '1234567890',
			'symbols':   '!@#$%^&*()[]{},.<>/\?=+|',
			
		}

		# form sequence string based on the definitions above and
		# the values of relevant command line options
		the_string = ''
		if self.options.lowercase and self.options.nolowercase == False:
			self.vo('  including '+self.desc['lowercase']+' (likelihood: '+str(self.options.lowercase)+')')
			for i in range(0, self.options.lowercase):
				the_string += valid_chars['lowercase']
		else:
			self.vo('  omitting '+self.desc['lowercase'])
		if self.options.uppercase and self.options.nouppercase == False:
			self.vo('  including '+self.desc['uppercase']+' (likelihood: '+str(self.options.uppercase)+')')
			for i in range(0, self.options.uppercase):
				the_string += valid_chars['uppercase']
		else:
			self.vo('  omitting '+self.desc['uppercase']+'')
		if self.options.digits and self.options.nodigits == False:
			self.vo('  including '+self.desc['digits']+' (likelihood: '+str(self.options.digits)+')')
			for i in range(0, self.options.digits):
				the_string += valid_chars['digits']
		else:
			self.vo('  omitting '+self.desc['digits']+'')
		if self.options.symbols and self.options.nosymbols == False:
			self.vo('  including '+self.desc['symbols']+' (likelihood: '+str(self.options.symbols)+')')
			for i in range(0, self.options.symbols):
				the_string += valid_chars['symbols']
		else:
			self.vo('  omitting '+self.desc['symbols']+'')

		self.vo()
		return the_string

	def read_file(self, filename):
		if filename == '-':
			self.vo('Reading sequence from standard input')
			the_string = sys.stdin.read()
		else:
			self.vo('Reading file: '+filename)
			the_file = open(filename, 'r')
			the_string = the_file.read() 

		# break the file into lines, strip whitespace from each line,
		# and re-form all lines into a single string
		the_lines = the_string.splitlines()
		the_string = ''
		for i in the_lines:
			the_string += i.strip() 
		self.vo()
		self.vo('Input string: "'+the_string+'"')
		self.vo()
		return the_string

	def get_opts(self, usage, version):
		parser = optparse.OptionParser(usage=usage, version=version)

		parser.add_option('-v', '--verbose', dest='verbose',
				action='store_true', default=False,
				help='print verbose output')
		parser.add_option('-c', '--chars', dest='chars',
				type='int', default=8,
				help='number of characters per password (default 8)', metavar='N')
		parser.add_option('-n', '--number', dest='number',
				type='int', default=10,
				help='number of passwords to generate (default 10)', metavar='N')

		generator = optparse.OptionGroup(parser, 'Sequence Generator Options',
				'These options control the inclusion of certain character types '
				'in passwords generated using the built-in sequence generator. '
				'You can disable any character group by setting its likelihood to '
				'zero. These options only apply to the generator and do not '
				'affect strings read from a file or stdin.')
		generator.add_option('-l', '--lowercase', dest='lowercase',
				type='int', metavar='N', default=5,
				help='likelihood of '+self.desc['lowercase']+' (default %default)')
		generator.add_option('-L', '--nolowercase', dest='nolowercase',
				action='store_true', default=False,
				help='disable '+self.desc['lowercase']+' (same as --lowercase=0)')
		generator.add_option('-u', '--uppercase', dest='uppercase',
				type='int', metavar='N', default=2,
				help='likelihood of '+self.desc['uppercase']+' (default %default)')
		generator.add_option('-U', '--nouppercase', dest='nouppercase',
				action='store_true', default=False,
				help='disable '+self.desc['uppercase']+' (same as --uppercase=0)')
		generator.add_option('-d', '--digits', dest='digits',
				type='int', metavar='N', default=2,
				help='likelihood of '+self.desc['digits']+' (default %default)')
		generator.add_option('-D', '--nodigits', dest='nodigits',
				action='store_true', default=False,
				help='disable '+self.desc['digits']+' (same as --digits=0)')
		generator.add_option('-s', '--symbols', dest='symbols',
				type='int', metavar='N', default=1,
				help='likelihood of '+self.desc['symbols']+' (default %default)')
		generator.add_option('-S', '--nosymbols', dest='nosymbols',
				action='store_true', default=False,
				help='disable '+self.desc['symbols']+' (same as --symbols=0)')

		parser.add_option_group(generator)

		return parser

	def run(self):
		# print title
		self.vo(self.parser.get_version())
		self.vo()

		# check if filename has been given
		if len(self.args) > 1:
			parser.error('too many arguments')
		elif len(self.args) == 1:
			the_file = self.args[0]
			the_sequence = read_file(self.args[0])
			the_sequence = the_sequence.decode('utf-8')
		else:
			the_sequence = self.generate_sequence()

		pw_length = self.options.chars
		number_of_passwords = self.options.number

		if len(the_sequence) < 1:
			sys.exit('Error: empty sequence')

		self.vo('Password length: '+str(self.options.chars))
		self.vo()
		self.vo('Passwords:')

		for i in range(0, number_of_passwords):
			the_pw = ''
			for i in range(0, pw_length):
				the_letter = random.choice(the_sequence),
				the_pw += ''.join(the_letter)

			print(the_pw)

		self.vo(str(self.options.number) + ' password(s) generated')
		self.vo()

def main():
	gen = passwordGenerator()

	gen.run()

main()
